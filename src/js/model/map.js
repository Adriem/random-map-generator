var Direction, Map, Room, Tile;

Tile = {
  EMPTY: 0,
  OCCUPIED: 1,
  GROUND: 1,
  WALL: -1,
  DOOR: -2,
  FIRST_ROOM: 2,
  TREASURE_ROOM: 3,
  SECRET_ROOM: 4
};

Direction = {
  NORTH: 0,
  EAST: 1,
  SOUTH: 2,
  WEST: 3
};


/*
  This class represents a room in the map. The rom is defined by a point in a
  2D space (representing its upper-left corner), its width and its height. It
  is also linked to its neighbours, so it can be treated as a node in a graph.
 */

Room = (function() {
  function Room(x, y, width, height, neighbours, id, special, state) {
    var i;
    if (state == null) {
      state = 'open';
    }
    this.origin = new Point(x, y);
    this.p2 = new Point(x + width - 1, y + height - 1);
    this.state = 'open';
    this.special = special;
    this.width = width;
    this.height = height;
    this.id = id;
    this.neighbours = neighbours != null ? neighbours : (function() {
      var j, results;
      results = [];
      for (i = j = 0; j < 8; i = ++j) {
        results.push(null);
      }
      return results;
    })();
  }

  Room.prototype.getExits = function() {
    var i;
    return [].push((function() {
      var j, ref, results;
      results = [];
      for (i = j = 0, ref = this.width; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push((Direction.NORTH + (i * 4), Direction.SOUTH + (i * 4)));
      }
      return results;
    }).call(this), (function() {
      var j, ref, results;
      results = [];
      for (i = j = 0, ref = this.height; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        results.push((Direction.EAST + (i * 4), Direction.WEST + (i * 4)));
      }
      return results;
    }).call(this));
  };

  Room.prototype.hasExit = function(exit) {
    return ((exit % 4 === Direction.NORTH || exit % 4 === Direction.SOUTH) && Math.floor(exit / 4) < this.width) || ((exit % 4 === Direction.EAST || exit % 4 === Direction.WEST) && Math.floor(exit / 4) < this.height);
  };

  Room.prototype.getAvailableExits = function() {
    var door, j, len, neighbour, ref, results;
    ref = this.neighbours;
    results = [];
    for (door = j = 0, len = ref.length; j < len; door = ++j) {
      neighbour = ref[door];
      if (this.hasExit(door) && (neighbour == null)) {
        results.push(door);
      }
    }
    return results;
  };

  Room.prototype.clone = function() {
    var n;
    return new Room(this.origin[0], this.origin[1], this.width, this.height, (function() {
      var j, len, ref, results;
      ref = this.neighbours;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        n = ref[j];
        results.push(n);
      }
      return results;
    }).call(this), this.id, this.special, this.state);
  };

  Room.prototype.isContainedIn = function(array) {
    var item, j, len;
    for (j = 0, len = array.length; j < len; j++) {
      item = array[j];
      if (item.origin[0] === this.origin[0] && item.origin[1] === this.origin[1] && item.width === this.width && item.height === this.height) {
        return true;
      }
    }
    return false;
  };

  return Room;

})();


/*
  This class represents the hole map. It is defined by a height, a width and
  a list of rooms.
 */

Map = (function() {
  var paintRoom;

  function Map(width1, height1, roomList) {
    this.width = width1;
    this.height = height1;
    this.roomList = roomList;
  }

  Map.prototype.getTilemap = function(tilesPerUnit) {
    var i, j, len, ref, room, tilemap;
    tilesPerUnit++;
    tilemap = new Tilemap((this.width * tilesPerUnit) + 1, (this.height * tilesPerUnit) + 1, Tile.EMPTY);
    ref = this.roomList;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      room = ref[i];
      paintRoom(room, tilemap, tilesPerUnit);
    }
    return tilemap;
  };

  paintRoom = function(room, tilemap, tilesPerUnit) {
    var door, doorOffset, height, j, len, neighbour, origin, ref, results, width;
    origin = new Point(room.origin[0] * tilesPerUnit, room.origin[1] * tilesPerUnit);
    width = room.width * tilesPerUnit;
    height = room.height * tilesPerUnit;
    if (room.special === 'first room') {
      tilemap.set(origin[0] + 1, origin[1] + 1, width, height, Tile.FIRST_ROOM);
    } else if (room.special === 'treasure room') {
      tilemap.set(origin[0] + 1, origin[1] + 1, width, height, Tile.TREASURE_ROOM);
    } else if (room.special === 'secret room') {
      tilemap.set(origin[0] + 1, origin[1] + 1, width, height, Tile.SECRET_ROOM);
    } else {
      tilemap.set(origin[0] + 1, origin[1] + 1, width, height, Tile.GROUND);
    }
    tilemap.set(origin[0], origin[1], width + 1, 1, Tile.WALL);
    tilemap.set(origin[0], origin[1] + height, width + 1, 1, Tile.WALL);
    tilemap.set(origin[0] + width, origin[1], 1, height + 1, Tile.WALL);
    tilemap.set(origin[0], origin[1], 1, height + 1, Tile.WALL);
    ref = room.neighbours;
    results = [];
    for (door = j = 0, len = ref.length; j < len; door = ++j) {
      neighbour = ref[door];
      if (!(neighbour != null)) {
        continue;
      }
      doorOffset = ((Math.floor(door / 4)) * tilesPerUnit) + (Math.floor(tilesPerUnit / 2));
      switch (door % 4) {
        case Direction.NORTH:
          results.push(tilemap[origin[0] + doorOffset][origin[1]] = Tile.DOOR);
          break;
        case Direction.SOUTH:
          results.push(tilemap[origin[0] + doorOffset][origin[1] + height] = Tile.DOOR);
          break;
        case Direction.EAST:
          results.push(tilemap[origin[0] + width][origin[1] + doorOffset] = Tile.DOOR);
          break;
        case Direction.WEST:
          results.push(tilemap[origin[0]][origin[1] + doorOffset] = Tile.DOOR);
          break;
        default:
          results.push(void 0);
      }
    }
    return results;
  };

  return Map;

})();

this.Direction = Direction;

this.Tile = Tile;

this.Room = Room;

this.Map = Map;

//# sourceMappingURL=data:application/json;base64,