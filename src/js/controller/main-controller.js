var setupToggleable,
  hasProp = {}.hasOwnProperty;

$(document).ready(function() {
  var canvas, controls, drawMap, drawStepByStep, generateMap, key, map, properties, value;
  canvas = new CanvasController('canvas');
  map = null;
  properties = {
    tilesPerUnit: new NumericInput('tilesPerUnit', 'Tiles per unit', 1),
    wallStyle: new SelectInput('wallStyle', "Wall style", wallStyle),
    drawGrid: new ToggleInput('drawGrid', "Draw grid"),
    debugMode: new ToggleInput('debugMode', "Show debug info", true)
  };
  controls = {
    mapSize: new NumericInput('mapSize', 'Map size (units)', 5),
    numberOfRooms: new NumericInput('numberOfRooms', 'Number of rooms', 1),
    initialRoomW: new NumericInput('initialRoomW', 'Initial room width', 1),
    initialRoomH: new NumericInput('initialRoomH', 'Initial room height', 1),
    minRoomSize: new NumericInput('minRoomSize', 'Min. room size', 1),
    maxRoomSize: new NumericInput('maxRoomSize', 'Max. room size', 1)
  };
  generateMap = function() {
    var steps;
    steps = [];
    map = generate(controls.numberOfRooms.get(), {
      width: controls.mapSize.get(),
      height: controls.mapSize.get(),
      initialRoomWidth: controls.initialRoomW.get(),
      initialRoomHeight: controls.initialRoomH.get(),
      minRoomSize: controls.minRoomSize.get(),
      maxRoomSize: controls.maxRoomSize.get()
    }, function(map, step) {
      console.log("Step #" + step + ": ", map.roomList);
      return steps.push(map);
    });
    return drawStepByStep(canvas, steps);
  };
  drawMap = function(canvas, map) {
    var tilemap;
    tilemap = map.getTilemap(properties.tilesPerUnit.get());
    return canvas.drawMap(tilemap, properties.drawGrid.get(), properties.wallStyle.get());
  };
  drawStepByStep = function(canvas, steps, i) {
    if (i == null) {
      i = 0;
    }
    drawMap(canvas, steps.shift());
    if (steps.length > 0) {
      return setTimeout((function() {
        return drawStepByStep(canvas, steps);
      }), 250);
    }
  };
  for (key in properties) {
    if (!hasProp.call(properties, key)) continue;
    value = properties[key];
    $('#renderer-controls').append(value.html);
  }
  for (key in controls) {
    if (!hasProp.call(controls, key)) continue;
    value = controls[key];
    $('#generator-controls').append(value.html);
  }
  $("#generate").click(generateMap);
  $('[data-togle="tooltip"]').tooltip();
  controls.mapSize.set(Defaults.MAP_SIZE);
  controls.numberOfRooms.set(Defaults.NUMBER_OF_ROOMS);
  controls.initialRoomW.set(Defaults.INITIAL_ROOM_WIDTH);
  controls.initialRoomH.set(Defaults.INITIAL_ROOM_HEIGHT);
  controls.minRoomSize.set(Defaults.MIN_ROOM_SIZE);
  controls.maxRoomSize.set(Defaults.MAX_ROOM_SIZE);
  properties.tilesPerUnit.set(Defaults.TILES_PER_UNIT);
  properties.wallStyle.set(2);
  properties.drawGrid.set(true);
  properties.debugMode.set(false);
  properties.tilesPerUnit.setListener(function() {
    return drawMap(canvas, map);
  });
  properties.wallStyle.setListener(function() {
    return drawMap(canvas, map);
  });
  properties.drawGrid.setListener(function() {
    return drawMap(canvas, map);
  });
  properties.drawGrid.setListener(function() {
    return drawMap(canvas, map);
  });
  return generateMap();
});

setupToggleable = function(toggle, input, refVal, disabledVal) {
  if (disabledVal == null) {
    disabledVal = 0;
  }
  $(input).val(refVal);
  if (refVal > disabledVal) {
    $(toggle).prop("checked", "on");
  } else {
    $(toggle).removeProp("checked", "on");
  }
  return $(toggle).change(function() {
    if ($(toggle).prop("checked")) {
      return $(input).removeAttr("disabled", "");
    } else {
      return $(input).attr("disabled", "");
    }
  });
};

//# sourceMappingURL=data:application/json;base64,