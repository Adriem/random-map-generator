var setupToggleable,
  hasProp = {}.hasOwnProperty;

$(document).ready(function() {
  var canvas, controls, drawMap, drawStepByStep, generateMap, key, map, properties, value;
  canvas = new CanvasController('canvas');
  map = null;
  properties = {
    tilesPerUnit: new NumericInput('tilesPerUnit', 'Tiles per unit', 1),
    wallStyle: new SelectInput('wallStyle', "Wall style", wallStyle),
    drawGrid: new ToggleInput('drawGrid', "Draw grid"),
    debugMode: new ToggleInput('debugMode', "Show debug info", true)
  };
  controls = {
    mapSize: new NumericInput('mapSize', 'Map size (units)', 5),
    numberOfRooms: new NumericInput('numberOfRooms', 'Number of rooms', 1),
    initialRoomW: new NumericInput('initialRoomW', 'Initial room width', 1),
    initialRoomH: new NumericInput('initialRoomH', 'Initial room height', 1),
    minRoomSize: new NumericInput('minRoomSize', 'Min. room size', 1),
    maxRoomSize: new NumericInput('maxRoomSize', 'Max. room size', 1)
  };
  generateMap = function() {
    var steps;
    steps = [];
    map = generate(controls.mapSize.get(), controls.mapSize.get(), controls.numberOfRooms.get(), {
      initialRoomWidth: controls.initialRoomW.get(),
      initialRoomHeight: controls.initialRoomH.get(),
      minRoomSize: controls.minRoomSize.get(),
      maxRoomSize: controls.maxRoomSize.get()
    }, function(map, step) {
      console.log("Step #" + step + ": ", map.roomList);
      return steps.push(map);
    });
    return drawStepByStep(canvas, steps);
  };
  drawMap = function(canvas, map) {
    var tilemap;
    tilemap = map.getTilemap(properties.tilesPerUnit.get());
    return canvas.drawMap(tilemap, properties.drawGrid.get(), properties.wallStyle.get());
  };
  drawStepByStep = function(canvas, steps, i) {
    if (i == null) {
      i = 0;
    }
    drawMap(canvas, steps.shift());
    if (steps.length > 0) {
      return setTimeout((function() {
        return drawStepByStep(canvas, steps);
      }), 250);
    }
  };
  for (key in properties) {
    if (!hasProp.call(properties, key)) continue;
    value = properties[key];
    $('#renderer-controls').append(value.html);
  }
  for (key in controls) {
    if (!hasProp.call(controls, key)) continue;
    value = controls[key];
    $('#generator-controls').append(value.html);
  }
  $("#generate").click(generateMap);
  $('[data-togle="tooltip"]').tooltip();
  controls.mapSize.set(Defaults.MAP_WIDTH);
  controls.numberOfRooms.set(Defaults.NUMBER_OF_ROOMS);
  controls.initialRoomW.set(Defaults.INITIAL_ROOM_WIDTH);
  controls.initialRoomH.set(Defaults.INITIAL_ROOM_HEIGHT);
  controls.minRoomSize.set(Defaults.MIN_ROOM_WIDTH);
  controls.maxRoomSize.set(Defaults.MAX_ROOM_WIDTH);
  properties.tilesPerUnit.set(Defaults.TILES_PER_UNIT);
  properties.wallStyle.set(2);
  properties.drawGrid.set(true);
  properties.debugMode.set(false);
  properties.tilesPerUnit.setListener(function() {
    return drawMap(canvas, map);
  });
  properties.wallStyle.setListener(function() {
    return drawMap(canvas, map);
  });
  properties.drawGrid.setListener(function() {
    return drawMap(canvas, map);
  });
  properties.drawGrid.setListener(function() {
    return drawMap(canvas, map);
  });
  return generateMap();
});

setupToggleable = function(toggle, input, refVal, disabledVal) {
  if (disabledVal == null) {
    disabledVal = 0;
  }
  $(input).val(refVal);
  if (refVal > disabledVal) {
    $(toggle).prop("checked", "on");
  } else {
    $(toggle).removeProp("checked", "on");
  }
  return $(toggle).change(function() {
    if ($(toggle).prop("checked")) {
      return $(input).removeAttr("disabled", "");
    } else {
      return $(input).attr("disabled", "");
    }
  });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXIvbWFpbi1jb250cm9sbGVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLGVBQUE7RUFBQTs7QUFBQSxDQUFBLENBQUUsUUFBRixDQUFXLENBQUMsS0FBWixDQUFrQixTQUFBO0FBRWhCLE1BQUE7RUFBQSxNQUFBLEdBQWEsSUFBQSxnQkFBQSxDQUFpQixRQUFqQjtFQUNiLEdBQUEsR0FBTTtFQUdOLFVBQUEsR0FDRTtJQUFBLFlBQUEsRUFBbUIsSUFBQSxZQUFBLENBQWEsY0FBYixFQUE2QixnQkFBN0IsRUFBK0MsQ0FBL0MsQ0FBbkI7SUFDQSxTQUFBLEVBQW1CLElBQUEsV0FBQSxDQUFZLFdBQVosRUFBeUIsWUFBekIsRUFBdUMsU0FBdkMsQ0FEbkI7SUFFQSxRQUFBLEVBQW1CLElBQUEsV0FBQSxDQUFZLFVBQVosRUFBd0IsV0FBeEIsQ0FGbkI7SUFHQSxTQUFBLEVBQW1CLElBQUEsV0FBQSxDQUFZLFdBQVosRUFBeUIsaUJBQXpCLEVBQTRDLElBQTVDLENBSG5COztFQU1GLFFBQUEsR0FDRTtJQUFBLE9BQUEsRUFBb0IsSUFBQSxZQUFBLENBQWEsU0FBYixFQUF3QixrQkFBeEIsRUFBNEMsQ0FBNUMsQ0FBcEI7SUFDQSxhQUFBLEVBQW9CLElBQUEsWUFBQSxDQUFhLGVBQWIsRUFBOEIsaUJBQTlCLEVBQWlELENBQWpELENBRHBCO0lBRUEsWUFBQSxFQUFvQixJQUFBLFlBQUEsQ0FBYSxjQUFiLEVBQTZCLG9CQUE3QixFQUFtRCxDQUFuRCxDQUZwQjtJQUdBLFlBQUEsRUFBb0IsSUFBQSxZQUFBLENBQWEsY0FBYixFQUE2QixxQkFBN0IsRUFBb0QsQ0FBcEQsQ0FIcEI7SUFJQSxXQUFBLEVBQW9CLElBQUEsWUFBQSxDQUFhLGFBQWIsRUFBNEIsZ0JBQTVCLEVBQThDLENBQTlDLENBSnBCO0lBS0EsV0FBQSxFQUFvQixJQUFBLFlBQUEsQ0FBYSxhQUFiLEVBQTRCLGdCQUE1QixFQUE4QyxDQUE5QyxDQUxw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RUFBMEIsRUFBMUIsRUFIRjs7RUFEZSxDQUFqQjtBQVJnQiIsImZpbGUiOiJjb250cm9sbGVyL21haW4tY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIiQoZG9jdW1lbnQpLnJlYWR5ICgpIC0+XHJcblxyXG4gIGNhbnZhcyA9IG5ldyBDYW52YXNDb250cm9sbGVyICdjYW52YXMnXHJcbiAgbWFwID0gbnVsbFxyXG5cclxuICAjIFJFTkRFUkVSIFBST1BFUlRJRVNcclxuICBwcm9wZXJ0aWVzID1cclxuICAgIHRpbGVzUGVyVW5pdCA6IG5ldyBOdW1lcmljSW5wdXQoJ3RpbGVzUGVyVW5pdCcsICdUaWxlcyBwZXIgdW5pdCcsIDEpXHJcbiAgICB3YWxsU3R5bGUgICAgOiBuZXcgU2VsZWN0SW5wdXQoJ3dhbGxTdHlsZScsIFwiV2FsbCBzdHlsZVwiLCB3YWxsU3R5bGUpXHJcbiAgICBkcmF3R3JpZCAgICAgOiBuZXcgVG9nZ2xlSW5wdXQoJ2RyYXdHcmlkJywgXCJEcmF3IGdyaWRcIilcclxuICAgIGRlYnVnTW9kZSAgICA6IG5ldyBUb2dnbGVJbnB1dCgnZGVidWdNb2RlJywgXCJTaG93IGRlYnVnIGluZm9cIiwgdHJ1ZSlcclxuXHJcbiAgIyBHRU5FUkFUT1IgQ09OVFJPTFNcclxuICBjb250cm9scyA9XHJcbiAgICBtYXBTaXplICAgICAgIDogbmV3IE51bWVyaWNJbnB1dCgnbWFwU2l6ZScsICdNYXAgc2l6ZSAodW5pdHMpJywgNSlcclxuICAgIG51bWJlck9mUm9vbXMgOiBuZXcgTnVtZXJpY0lucHV0KCdudW1iZXJPZlJvb21zJywgJ051bWJlciBvZiByb29tcycsIDEpXHJcbiAgICBpbml0aWFsUm9vbVcgIDogbmV3IE51bWVyaWNJbnB1dCgnaW5pdGlhbFJvb21XJywgJ0luaXRpYWwgcm9vbSB3aWR0aCcsIDEpXHJcbiAgICBpbml0aWFsUm9vbUggIDogbmV3IE51bWVyaWNJbnB1dCgnaW5pdGlhbFJvb21IJywgJ0luaXRpYWwgcm9vbSBoZWlnaHQnLCAxKVxyXG4gICAgbWluUm9vbVNpemUgICA6IG5ldyBOdW1lcmljSW5wdXQoJ21pblJvb21TaXplJywgJ01pbi4gcm9vbSBzaXplJywgMSlcclxuICAgIG1heFJvb21TaXplICAgOiBuZXcgTnVtZXJpY0lucHV0KCdtYXhSb29tU2l6ZScsICdNYXguIHJvb20gc2l6ZScsIDEpXHJcblxyXG4gICMgRlVOQ1RJT04gREVGSU5JVElPTlxyXG4gIGdlbmVyYXRlTWFwID0gKCkgLT5cclxuICAgIHN0ZXBzID0gW11cclxuICAgIG1hcCA9IGdlbmVyYXRlKFxyXG4gICAgICBjb250cm9scy5tYXBTaXplLmdldCgpLFxyXG4gICAgICBjb250cm9scy5tYXBTaXplLmdldCgpLFxyXG4gICAgICBjb250cm9scy5udW1iZXJPZlJvb21zLmdldCgpLFxyXG4gICAgICB7XHJcbiAgICAgICAgaW5pdGlhbFJvb21XaWR0aDogY29udHJvbHMuaW5pdGlhbFJvb21XLmdldCgpXHJcbiAgICAgICAgaW5pdGlhbFJvb21IZWlnaHQ6IGNvbnRyb2xzLmluaXRpYWxSb29tSC5nZXQoKVxyXG4gICAgICAgIG1pblJvb21TaXplOiBjb250cm9scy5taW5Sb29tU2l6ZS5nZXQoKVxyXG4gICAgICAgIG1heFJvb21TaXplOiBjb250cm9scy5tYXhSb29tU2l6ZS5nZXQoKVxyXG4gICAgICB9LFxyXG4gICAgICAobWFwLCBzdGVwKSAtPlxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiU3RlcCAjI3tzdGVwfTogXCIsIG1hcC5yb29tTGlzdClcclxuICAgICAgICBzdGVwcy5wdXNoIG1hcFxyXG4gICAgKVxyXG4gICAgZHJhd1N0ZXBCeVN0ZXAgY2FudmFzLCBzdGVwc1xyXG4gICAgIyBkcmF3TWFwIGNhbnZhcywgbWFwXHJcblxyXG4gIGRyYXdNYXAgPSAoY2FudmFzLCBtYXApIC0+XHJcbiAgICB0aWxlbWFwID0gbWFwLmdldFRpbGVtYXAocHJvcGVydGllcy50aWxlc1BlclVuaXQuZ2V0KCkpXHJcbiAgICBjYW52YXMuZHJhd01hcCh0aWxlbWFwLCBwcm9wZXJ0aWVzLmRyYXdHcmlkLmdldCgpLCBwcm9wZXJ0aWVzLndhbGxTdHlsZS5nZXQoKSlcclxuXHJcbiAgZHJhd1N0ZXBCeVN0ZXAgPSAoY2FudmFzLCBzdGVwcywgaSA9IDApIC0+XHJcbiAgICBkcmF3TWFwIGNhbnZhcywgc3RlcHMuc2hpZnQoKVxyXG4gICAgc2V0VGltZW91dCgoKCkgLT4gZHJhd1N0ZXBCeVN0ZXAoY2FudmFzLCBzdGVwcykpLCAyNTApIGlmIHN0ZXBzLmxlbmd0aCA+IDBcclxuXHJcbiAgIyBBZGQgY29udHJvbHMgdG8gdGhlIHBhZ2VcclxuICAkKCcjcmVuZGVyZXItY29udHJvbHMnKS5hcHBlbmQodmFsdWUuaHRtbCkgZm9yIG93biBrZXksIHZhbHVlIG9mIHByb3BlcnRpZXNcclxuICAkKCcjZ2VuZXJhdG9yLWNvbnRyb2xzJykuYXBwZW5kKHZhbHVlLmh0bWwpIGZvciBvd24ga2V5LCB2YWx1ZSBvZiBjb250cm9sc1xyXG5cclxuICAjIEJpbmQgZnVuY3Rpb25zIHRvIGJ1dHRvbnNcclxuICAkKFwiI2dlbmVyYXRlXCIpLmNsaWNrKGdlbmVyYXRlTWFwKVxyXG5cclxuICAjIEVuYWJsZSB0b29sdGlwcyB3aXRoIGJvb3RzdHJhcFxyXG4gICQoJ1tkYXRhLXRvZ2xlPVwidG9vbHRpcFwiXScpLnRvb2x0aXAoKVxyXG5cclxuICAjIFNldCBkZWZhdWx0IHZhbHVlcyB0byB0aGUgaW5wdXRzXHJcbiAgY29udHJvbHMubWFwU2l6ZS5zZXQoRGVmYXVsdHMuTUFQX1dJRFRIKVxyXG4gIGNvbnRyb2xzLm51bWJlck9mUm9vbXMuc2V0KERlZmF1bHRzLk5VTUJFUl9PRl9ST09NUylcclxuICBjb250cm9scy5pbml0aWFsUm9vbVcuc2V0KERlZmF1bHRzLklOSVRJQUxfUk9PTV9XSURUSClcclxuICBjb250cm9scy5pbml0aWFsUm9vbUguc2V0KERlZmF1bHRzLklOSVRJQUxfUk9PTV9IRUlHSFQpXHJcbiAgY29udHJvbHMubWluUm9vbVNpemUuc2V0KERlZmF1bHRzLk1JTl9ST09NX1dJRFRIKVxyXG4gIGNvbnRyb2xzLm1heFJvb21TaXplLnNldChEZWZhdWx0cy5NQVhfUk9PTV9XSURUSClcclxuXHJcbiAgcHJvcGVydGllcy50aWxlc1BlclVuaXQuc2V0KERlZmF1bHRzLlRJTEVTX1BFUl9VTklUKVxyXG4gIHByb3BlcnRpZXMud2FsbFN0eWxlLnNldCgyKVxyXG4gIHByb3BlcnRpZXMuZHJhd0dyaWQuc2V0KHRydWUpXHJcbiAgcHJvcGVydGllcy5kZWJ1Z01vZGUuc2V0KGZhbHNlKVxyXG5cclxuICAjIFNldCBsaXN0ZW5lciB0byBhdXRvLXVwZGF0ZWQgaW5wdXRzXHJcbiAgcHJvcGVydGllcy50aWxlc1BlclVuaXQuc2V0TGlzdGVuZXIoKCkgLT4gZHJhd01hcChjYW52YXMsIG1hcCkpXHJcbiAgcHJvcGVydGllcy53YWxsU3R5bGUuc2V0TGlzdGVuZXIoKCkgLT4gZHJhd01hcChjYW52YXMsIG1hcCkpXHJcbiAgcHJvcGVydGllcy5kcmF3R3JpZC5zZXRMaXN0ZW5lcigoKSAtPiBkcmF3TWFwKGNhbnZhcywgbWFwKSlcclxuICBwcm9wZXJ0aWVzLmRyYXdHcmlkLnNldExpc3RlbmVyKCgpIC0+IGRyYXdNYXAoY2FudmFzLCBtYXApKVxyXG5cclxuICAjIEdlbmVyYXRlIG1hcCBvbiBwYWdlIGxvYWRcclxuICBnZW5lcmF0ZU1hcCgpXHJcblxyXG5cclxuXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4jIExFR0FDWSA6XFxcclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuc2V0dXBUb2dnbGVhYmxlID0gKHRvZ2dsZSwgaW5wdXQsIHJlZlZhbCwgZGlzYWJsZWRWYWwgPSAwKSAtPlxyXG4gICMgU2V0IGRlZmF1bHQgdmFsdWVcclxuICAkKGlucHV0KS52YWwocmVmVmFsKVxyXG4gIGlmIHJlZlZhbCA+IGRpc2FibGVkVmFsXHJcbiAgICAkKHRvZ2dsZSkucHJvcChcImNoZWNrZWRcIiwgXCJvblwiKVxyXG4gIGVsc2VcclxuICAgICQodG9nZ2xlKS5yZW1vdmVQcm9wKFwiY2hlY2tlZFwiLCBcIm9uXCIpXHJcbiAgIyBEaXNhYmxlIGZpZWxkIG9uIGNoZWNrYm94IGRpc2FibGVcclxuICAkKHRvZ2dsZSkuY2hhbmdlIC0+XHJcbiAgICBpZiAkKHRvZ2dsZSkucHJvcChcImNoZWNrZWRcIilcclxuICAgICAgJChpbnB1dCkucmVtb3ZlQXR0cihcImRpc2FibGVkXCIsIFwiXCIpXHJcbiAgICBlbHNlXHJcbiAgICAgICQoaW5wdXQpLmF0dHIoXCJkaXNhYmxlZFwiLCBcIlwiKVxyXG4iXX0=