var hasProp = {}.hasOwnProperty;

$(document).ready(function() {
  var canvas, controls, drawMap, drawStepByStep, drawing, generateMap, key, map, properties, value;
  drawing = false;
  canvas = new CanvasController('canvas');
  map = null;
  properties = {
    tilesPerUnit: new NumericInput('tilesPerUnit', 'Tiles per unit', 1),
    wallStyle: new SelectInput('wallStyle', "Wall style", wallStyle),
    drawGrid: new ToggleInput('drawGrid', "Draw grid"),
    showRoomList: new ToggleInput('showRoomList', "Show room list")
  };
  controls = {
    mapSize: new NumericInput('mapSize', 'Map size (units)', 5),
    numberOfRooms: new NumericInput('numberOfRooms', 'Number of rooms', 1),
    initialRoomW: new NumericInput('initialRoomW', 'Initial room width', 1),
    initialRoomH: new NumericInput('initialRoomH', 'Initial room height', 1),
    minRoomSize: new NumericInput('minRoomSize', 'Min. room size', 1),
    maxRoomSize: new NumericInput('maxRoomSize', 'Max. room size', 1),
    minArea: new ToggleableNumericInput('minArea', 'Min. room area', 1),
    maxArea: new ToggleableNumericInput('maxArea', 'Max. room area', 1),
    ratioRestr: new ToggleableNumericInput('ratioRestr', 'Ratio restr.', 0.5, 1, 0.1)
  };
  generateMap = function() {
    var steps;
    steps = [];
    map = generate(controls.numberOfRooms.get(), {
      width: controls.mapSize.get(),
      height: controls.mapSize.get(),
      initialRoomWidth: controls.initialRoomW.get(),
      initialRoomHeight: controls.initialRoomH.get(),
      minRoomSize: controls.minRoomSize.get(),
      maxRoomSize: controls.maxRoomSize.get(),
      ratioRestriction: controls.ratioRestr.getToggleState() ? controls.ratioRestr.getValue() : void 0,
      maxRoomArea: controls.maxArea.getToggleState() ? controls.maxArea.getValue() : void 0,
      minRoomArea: controls.minArea.getToggleState() ? controls.minArea.getValue() : void 0
    }, function(map, step) {
      console.log("Step #" + step + ": ", map.roomList);
      return steps.push(map);
    });
    return drawStepByStep(canvas, steps);
  };
  drawMap = function(canvas, map) {
    var j, len, ref, room, tilemap;
    $('#room-list').empty();
    if (properties.showRoomList.get()) {
      ref = map.roomList;
      for (j = 0, len = ref.length; j < len; j++) {
        room = ref[j];
        $('#room-list').append("<div><strong>Room #" + room.id + ": </strong> {\n  x: " + room.x + ", y: " + room.y + ", width: " + room.width + ", height: " + room.height + "\n}</div>");
      }
    }
    tilemap = map.getTilemap(properties.tilesPerUnit.get());
    return canvas.drawMap(tilemap, properties.drawGrid.get(), properties.wallStyle.get());
  };
  drawStepByStep = function(canvas, steps, i) {
    if (i == null) {
      i = 0;
    }
    $('#generate').attr('disabled', '');
    drawing = true;
    drawMap(canvas, steps.shift());
    if (steps.length > 0) {
      return setTimeout((function() {
        return drawStepByStep(canvas, steps);
      }), 250);
    } else {
      $('#generate').removeAttr('disabled', '');
      return drawing = false;
    }
  };
  for (key in properties) {
    if (!hasProp.call(properties, key)) continue;
    value = properties[key];
    $('#renderer-controls').append(value.html);
  }
  for (key in controls) {
    if (!hasProp.call(controls, key)) continue;
    value = controls[key];
    $('#generator-controls').append(value.html);
  }
  $("#generate").click(generateMap);
  $('[data-togle="tooltip"]').tooltip();
  controls.mapSize.set(Defaults.MAP_SIZE);
  controls.numberOfRooms.set(Defaults.NUMBER_OF_ROOMS);
  controls.initialRoomW.set(Defaults.INITIAL_ROOM_WIDTH);
  controls.initialRoomH.set(Defaults.INITIAL_ROOM_HEIGHT);
  controls.minRoomSize.set(Defaults.MIN_ROOM_SIZE);
  controls.maxRoomSize.set(Defaults.MAX_ROOM_SIZE);
  controls.minArea.set(Defaults.MIN_ROOM_AREA);
  controls.minArea.toggle(true);
  controls.maxArea.set(Defaults.MAX_ROOM_AREA);
  controls.maxArea.toggle(false);
  controls.ratioRestr.set(Defaults.RATIO_RESTRICTION);
  controls.ratioRestr.toggle(false);
  properties.tilesPerUnit.set(Defaults.TILES_PER_UNIT);
  properties.wallStyle.set(2);
  properties.drawGrid.set(true);
  properties.tilesPerUnit.setListener(function() {
    if (!drawing) {
      return drawMap(canvas, map);
    }
  });
  properties.wallStyle.setListener(function() {
    if (!drawing) {
      return drawMap(canvas, map);
    }
  });
  properties.drawGrid.setListener(function() {
    if (!drawing) {
      return drawMap(canvas, map);
    }
  });
  properties.showRoomList.setListener(function() {
    if (!drawing) {
      return drawMap(canvas, map);
    }
  });
  controls.maxArea.setToggleListener(function() {
    return controls.maxArea.toggle(controls.maxArea.getToggleState());
  });
  controls.minArea.setToggleListener(function() {
    return controls.minArea.toggle(controls.minArea.getToggleState());
  });
  controls.ratioRestr.setToggleListener(function() {
    return controls.ratioRestr.toggle(controls.ratioRestr.getToggleState());
  });
  return generateMap();
});

//# sourceMappingURL=data:application/json;base64,