var Tree, cfg, generateDoors, generateMap, generatePaths, generateRooms, spawnRoom, split;

cfg = {
  RATIO_RESTR: 0.45,
  PARTITION_LEVEL: 2,
  ROOM_REDUCTION: 0.3,
  MIN_ROOM_SIZE: 5,
  MAX_ROOM_SIZE: 20,
  MIN_SECTOR_REDUCTION: 2,
  MIN_SECTOR_SIZE: 10,
  MAX_SECTOR_SIZE: 24,
  BIG_ROOM_CHANCE: 60,
  ROOM_DELETING_RATIO: 0.4,
  DOOR_CHANCE: 100
};

Tree = (function() {
  function Tree(node1) {
    this.node = node1;
    this.childs = [];
  }

  Tree.prototype.isEmpty = function() {
    return this.node == null;
  };

  Tree.prototype.isLeaf = function() {
    return this.childs.length === 0;
  };

  Tree.prototype.getLeafs = function() {
    var child, k, len, ref, retVal;
    if (this.isLeaf()) {
      return [this];
    }
    retVal = [];
    ref = this.childs;
    for (k = 0, len = ref.length; k < len; k++) {
      child = ref[k];
      retVal = retVal.concat(child.getLeafs());
    }
    return retVal;
  };

  Tree.prototype.getNodeList = function() {
    var child, k, len, ref, retVal;
    retVal = [this.node];
    ref = this.childs;
    for (k = 0, len = ref.length; k < len; k++) {
      child = ref[k];
      retVal = retVal.concat(child.getNodeList());
    }
    return retVal;
  };

  Tree.prototype.kill = function() {
    this.node = void 0;
    this.childs = [];
    return void 0;
  };

  Tree.prototype.removeDeadLeafs = function() {
    var child, i, k, ref;
    if (!this.isLeaf()) {
      ref = this.childs;
      for (i = k = ref.length - 1; k >= 0; i = k += -1) {
        child = ref[i];
        child.removeDeadLeafs();
        if (child.isLeaf() && child.isEmpty()) {
          this.childs.splice(i, 1);
        }
      }
    }
    return void 0;
  };

  Tree.prototype.grow = function(splitFunction) {
    var childNodes, k, len, node, ref;
    childNodes = splitFunction(this.node);
    if ((childNodes != null) && (0 < (ref = childNodes.length) && ref <= 1)) {
      this.node = childNodes[0];
    } else if ((childNodes != null) && childNodes.length > 1) {
      for (k = 0, len = childNodes.length; k < len; k++) {
        node = childNodes[k];
        this.childs.push(new Tree(node).grow(splitFunction));
      }
    }
    return this;
  };

  Tree.prototype.paint = function(c) {
    var child, k, len, ref, results, tileSize;
    tileSize = TILE_SIZE();
    c.beginPath();
    c.strokeStyle = "#0f0";
    c.lineWidth = 6;
    c.strokeRect(this.node.x * tileSize, this.node.y * tileSize, this.node.w * tileSize, this.node.h * tileSize);
    ref = this.childs;
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      child = ref[k];
      results.push(child.paint(c));
    }
    return results;
  };

  return Tree;

})();

generateMap = function(size) {
  var paths, rooms, tilemap, tree;
  cfg.MIN_SECTOR_SIZE = cfg.MIN_ROOM_SIZE * 2;
  cfg.MAX_SECTOR_SIZE = cfg.MAX_ROOM_SIZE + 2 * cfg.MIN_SECTOR_REDUCTION;
  tilemap = new TileMap(size, size);
  tree = new Tree(new Rect(0, 0, size, size)).grow(split);
  rooms = generateRooms(tree, tilemap);
  tree.removeDeadLeafs();
  paths = generatePaths(tree, tilemap);
  tilemap.removeDeadEnds();
  generateDoors(tilemap.tilemap);
  tilemap.optimiseDoors();
  tilemap.drawWalls();
  tilemap.debug.tree = tree;
  return tilemap;
};

spawnRoom = function(sector) {
  var h, w, x, y;
  if (sector.w < sector.h) {
    w = random.value(cfg.MIN_ROOM_SIZE, sector.w - 2 * cfg.MIN_SECTOR_REDUCTION);
    h = sector.h - (sector.w - w);
  } else {
    h = random.value(cfg.MIN_ROOM_SIZE, sector.h - 2 * cfg.MIN_SECTOR_REDUCTION);
    w = sector.w - (sector.h - h);
  }
  x = sector.x + Math.floor((sector.w - w) / 2);
  y = sector.y - sector.x + x;
  return new Rect(x, y, w, h);
};

generateRooms = function(tree, tilemap) {
  var i, index, k, l, leaf, leafs, len, ref, rooms, roomsToDelete, x;
  rooms = [];
  leafs = tree.getLeafs();
  roomsToDelete = Math.round(leafs.length * cfg.ROOM_DELETING_RATIO);
  for (x = k = 0, ref = roomsToDelete; 0 <= ref ? k < ref : k > ref; x = 0 <= ref ? ++k : --k) {
    index = random.value(leafs.length);
    leafs[index].kill();
    leafs.splice(index, 1);
  }
  for (i = l = 0, len = leafs.length; l < len; i = ++l) {
    leaf = leafs[i];
    rooms[i] = spawnRoom(leaf.node);
    tilemap.drawRect(rooms[i]);
  }
  return rooms;
};

generatePaths = function(tree, tilemap) {
  var _, i, k, l, len, len1, path, paths, sectorList;
  paths = [];
  sectorList = tree.getNodeList();
  for (i = k = 0, len = sectorList.length; k < len; i = ++k) {
    _ = sectorList[i];
    paths.push(new Path(sectorList[i].center, sectorList[(i + 1) % sectorList.length].center));
  }
  for (l = 0, len1 = paths.length; l < len1; l++) {
    path = paths[l];
    tilemap.drawPath(path);
  }
  return paths;
};

generateDoors = function(tilemap) {
  var LOOKAHEAD, doors, i, j, k, l, m, n, o, p, q, ref, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, total;
  LOOKAHEAD = 3;
  doors = [];
  for (i = k = ref = LOOKAHEAD, ref1 = tilemap.length - LOOKAHEAD; ref <= ref1 ? k < ref1 : k > ref1; i = ref <= ref1 ? ++k : --k) {
    for (j = l = ref2 = LOOKAHEAD, ref3 = tilemap[i].length - LOOKAHEAD; ref2 <= ref3 ? l < ref3 : l > ref3; j = ref2 <= ref3 ? ++l : --l) {
      if (!(tilemap[i][j] === tile.GROUND)) {
        continue;
      }
      total = [0, 0, 0, 0];
      if ((tilemap[i - 1][j] === (ref4 = tilemap[i + 1][j]) && ref4 === tile.NULL) && (tilemap[i][j - 1] === (ref5 = tilemap[i][j + 1]) && ref5 === tile.GROUND)) {
        for (n = m = ref6 = -LOOKAHEAD; ref6 <= -1 ? m <= -1 : m >= -1; n = ref6 <= -1 ? ++m : --m) {
          if (tilemap[i - 1][j + n] !== tile.NULL) {
            total[0]++;
          }
          if (tilemap[i + 1][j + n] !== tile.NULL) {
            total[1]++;
          }
        }
        for (n = o = 1, ref7 = LOOKAHEAD; 1 <= ref7 ? o <= ref7 : o >= ref7; n = 1 <= ref7 ? ++o : --o) {
          if (tilemap[i - 1][j + n] !== tile.NULL) {
            total[2]++;
          }
          if (tilemap[i + 1][j + n] !== tile.NULL) {
            total[3]++;
          }
        }
      } else if ((tilemap[i][j - 1] === (ref8 = tilemap[i][j + 1]) && ref8 === tile.NULL) && (tilemap[i - 1][j] === (ref9 = tilemap[i + 1][j]) && ref9 === tile.GROUND)) {
        for (n = p = ref10 = -LOOKAHEAD; ref10 <= -1 ? p <= -1 : p >= -1; n = ref10 <= -1 ? ++p : --p) {
          if (tilemap[i + n][j - 1] !== tile.NULL) {
            total[0]++;
          }
          if (tilemap[i + n][j + 1] !== tile.NULL) {
            total[1]++;
          }
        }
        for (n = q = 1, ref11 = LOOKAHEAD; 1 <= ref11 ? q <= ref11 : q >= ref11; n = 1 <= ref11 ? ++q : --q) {
          if (tilemap[i + n][j - 1] !== tile.NULL) {
            total[2]++;
          }
          if (tilemap[i + n][j + 1] !== tile.NULL) {
            total[3]++;
          }
        }
      }
      if ((total[0] >= LOOKAHEAD || total[1] >= LOOKAHEAD || total[2] >= LOOKAHEAD || total[3] >= LOOKAHEAD) && random.test(cfg.DOOR_CHANCE)) {
        tilemap[i][j] = tile.DOOR;
        doors.push(new Point(j, i));
      }
    }
  }
  return doors;
};

split = function(sector, horizontalDir, steps) {
  var div1, div2, restriction;
  if (horizontalDir == null) {
    horizontalDir = random.test();
  }
  if (steps == null) {
    steps = cfg.PARTITION_LEVEL;
  }
  if (horizontalDir) {
    if (sector.h / sector.w < 2 * cfg.RATIO_RESTR) {
      return split(sector, !horizontalDir, steps);
    } else if ((steps === 0) || (sector.h < 2 * cfg.MIN_SECTOR_SIZE) || (sector.h < cfg.MAX_SECTOR_SIZE && random.test(cfg.BIG_ROOM_CHANCE))) {
      return [sector];
    } else {
      restriction = Math.max(cfg.MIN_SECTOR_SIZE, Math.ceil(sector.h * cfg.RATIO_RESTR));
      div1 = new Rect(sector.x, sector.y, sector.w, random.value(restriction, sector.h - restriction));
      div2 = new Rect(sector.x, sector.y + div1.h, sector.w, sector.h - div1.h);
    }
  } else {
    if (sector.w / sector.h < 2 * cfg.RATIO_RESTR) {
      return split(sector, !horizontalDir, steps);
    } else if ((steps === 0) || (sector.w < 2 * cfg.MIN_SECTOR_SIZE) || (sector.w < cfg.MAX_SECTOR_SIZE && random.test(cfg.BIG_ROOM_CHANCE))) {
      return [sector];
    } else {
      restriction = Math.max(cfg.MIN_SECTOR_SIZE, Math.ceil(sector.w * cfg.RATIO_RESTR));
      div1 = new Rect(sector.x, sector.y, random.value(restriction, sector.w - restriction), sector.h);
      div2 = new Rect(sector.x + div1.w, sector.y, sector.w - div1.w, sector.h);
    }
  }
  return split(div1, !horizontalDir, steps - 1).concat(split(div2, !horizontalDir, steps - 1));
};


/* EXPORT */

this.bsp = {
  config: cfg,
  generate: generateMap,
  Tree: Tree
};

//# sourceMappingURL=data:application/json;base64,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Q0EsUUFBQSxFQUFVLFdBRFY7QUFBQSxFQUVBLElBQUEsRUFBTSxJQUZOO0NBMUxGLENBQUEiLCJmaWxlIjoiYnNwLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiY2ZnID1cclxuICBSQVRJT19SRVNUUjogMC40NVxyXG4gIFBBUlRJVElPTl9MRVZFTDogMlxyXG4gIFJPT01fUkVEVUNUSU9OOiAwLjNcclxuICBNSU5fUk9PTV9TSVpFOiA1XHJcbiAgTUFYX1JPT01fU0laRTogMjBcclxuICBNSU5fU0VDVE9SX1JFRFVDVElPTjogMlxyXG4gIE1JTl9TRUNUT1JfU0laRTogMTBcclxuICBNQVhfU0VDVE9SX1NJWkU6IDI0XHJcbiAgQklHX1JPT01fQ0hBTkNFOiA2MFxyXG4gIFJPT01fREVMRVRJTkdfUkFUSU86IDAuNFxyXG4gIERPT1JfQ0hBTkNFOiAxMDBcclxuXHJcbmNsYXNzIFRyZWVcclxuICBjb25zdHJ1Y3RvcjogKEBub2RlKSAtPlxyXG4gICAgQGNoaWxkcyA9IFtdXHJcblxyXG4gIGlzRW1wdHk6IC0+XHJcbiAgICBub3QgQG5vZGU/XHJcblxyXG4gIGlzTGVhZjogLT5cclxuICAgIEBjaGlsZHMubGVuZ3RoIGlzIDBcclxuXHJcbiAgZ2V0TGVhZnM6IC0+XHJcbiAgICByZXR1cm4gW0BdIGlmIEBpc0xlYWYoKVxyXG4gICAgcmV0VmFsID0gW11cclxuICAgIHJldFZhbCA9IHJldFZhbC5jb25jYXQoY2hpbGQuZ2V0TGVhZnMoKSkgZm9yIGNoaWxkIGluIEBjaGlsZHNcclxuICAgIHJldFZhbFxyXG5cclxuICBnZXROb2RlTGlzdDogLT5cclxuICAgIHJldFZhbCA9IFtAbm9kZV1cclxuICAgIHJldFZhbCA9IHJldFZhbC5jb25jYXQgY2hpbGQuZ2V0Tm9kZUxpc3QoKSBmb3IgY2hpbGQgaW4gQGNoaWxkc1xyXG4gICAgcmV0VmFsXHJcblxyXG4gIGtpbGw6IC0+XHJcbiAgICBAbm9kZSA9IHVuZGVmaW5lZFxyXG4gICAgQGNoaWxkcyA9IFtdXHJcbiAgICB1bmRlZmluZWQgIyBBdm9pZGluZyB3cm9uZyByZXR1cm5cclxuXHJcbiAgcmVtb3ZlRGVhZExlYWZzOiAtPlxyXG4gICAgdW5sZXNzIEBpc0xlYWYoKVxyXG4gICAgICBmb3IgY2hpbGQsIGkgaW4gQGNoaWxkcyBieSAtMVxyXG4gICAgICAgIGNoaWxkLnJlbW92ZURlYWRMZWFmcygpXHJcbiAgICAgICAgQGNoaWxkcy5zcGxpY2UgaSwgMSBpZiBjaGlsZC5pc0xlYWYoKSBhbmQgY2hpbGQuaXNFbXB0eSgpXHJcbiAgICB1bmRlZmluZWQgIyBBdm9pZGluZyBwdXNoIG9wZXJhdGlvbnMgYW5kIHdyb25nIHJldHVyblxyXG5cclxuICBncm93OiAoc3BsaXRGdW5jdGlvbikgLT5cclxuICAgIGNoaWxkTm9kZXMgPSBzcGxpdEZ1bmN0aW9uKEBub2RlKVxyXG4gICAgaWYgY2hpbGROb2Rlcz8gYW5kIDAgPCBjaGlsZE5vZGVzLmxlbmd0aCA8PSAxXHJcbiAgICAgIEBub2RlID0gY2hpbGROb2Rlc1swXVxyXG4gICAgICAjIHJldFZhbCA9IEBncm93KGl0ZXJhdGlvbnMtMSwgc3BsaXRGdW5jdGlvbilcclxuICAgIGVsc2UgaWYgY2hpbGROb2Rlcz8gYW5kIGNoaWxkTm9kZXMubGVuZ3RoID4gMVxyXG4gICAgICBmb3Igbm9kZSBpbiBjaGlsZE5vZGVzXHJcbiAgICAgICAgQGNoaWxkcy5wdXNoKG5ldyBUcmVlKG5vZGUpLmdyb3coc3BsaXRGdW5jdGlvbikpXHJcbiAgICBAXHJcblxyXG4gIHBhaW50OiAoYykgLT5cclxuICAgIHRpbGVTaXplID0gVElMRV9TSVpFKClcclxuICAgIGMuYmVnaW5QYXRoKClcclxuICAgIGMuc3Ryb2tlU3R5bGUgPSBcIiMwZjBcIlxyXG4gICAgYy5saW5lV2lkdGggPSA2XHJcbiAgICBjLnN0cm9rZVJlY3QoQG5vZGUueCAqIHRpbGVTaXplLCBAbm9kZS55ICogdGlsZVNpemUsXHJcbiAgICAgIEBub2RlLncgKiB0aWxlU2l6ZSwgQG5vZGUuaCAqIHRpbGVTaXplKVxyXG4gICAgY2hpbGQucGFpbnQoYykgZm9yIGNoaWxkIGluIEBjaGlsZHNcclxuXHJcbmdlbmVyYXRlTWFwID0gKHNpemUpIC0+XHJcbiAgY2ZnLk1JTl9TRUNUT1JfU0laRSA9IGNmZy5NSU5fUk9PTV9TSVpFICogMlxyXG4gIGNmZy5NQVhfU0VDVE9SX1NJWkUgPSBjZmcuTUFYX1JPT01fU0laRSArIDIgKiBjZmcuTUlOX1NFQ1RPUl9SRURVQ1RJT05cclxuICB0aWxlbWFwID0gbmV3IFRpbGVNYXAoc2l6ZSwgc2l6ZSlcclxuICB0cmVlID0gbmV3IFRyZWUobmV3IFJlY3QoMCwgMCwgc2l6ZSwgc2l6ZSkpLmdyb3coc3BsaXQpXHJcbiAgcm9vbXMgPSBnZW5lcmF0ZVJvb21zKHRyZWUsIHRpbGVtYXApXHJcbiAgdHJlZS5yZW1vdmVEZWFkTGVhZnMoKVxyXG4gIHBhdGhzID0gZ2VuZXJhdGVQYXRocyh0cmVlLCB0aWxlbWFwKVxyXG4gIHRpbGVtYXAucmVtb3ZlRGVhZEVuZHMoKVxyXG4gIGdlbmVyYXRlRG9vcnModGlsZW1hcC50aWxlbWFwKVxyXG4gIHRpbGVtYXAub3B0aW1pc2VEb29ycygpXHJcbiAgdGlsZW1hcC5kcmF3V2FsbHMoKVxyXG4gIHRpbGVtYXAuZGVidWcudHJlZSA9IHRyZWVcclxuICB0aWxlbWFwXHJcblxyXG5zcGF3blJvb20gPSAoc2VjdG9yKSAtPlxyXG4gIGlmIHNlY3Rvci53IDwgc2VjdG9yLmhcclxuICAgIHcgPSByYW5kb20udmFsdWUoY2ZnLk1JTl9ST09NX1NJWkUsIHNlY3Rvci53IC0gMipjZmcuTUlOX1NFQ1RPUl9SRURVQ1RJT04pXHJcbiAgICBoID0gc2VjdG9yLmggLSAoc2VjdG9yLncgLSB3KVxyXG4gIGVsc2VcclxuICAgIGggPSByYW5kb20udmFsdWUoY2ZnLk1JTl9ST09NX1NJWkUsIHNlY3Rvci5oIC0gMipjZmcuTUlOX1NFQ1RPUl9SRURVQ1RJT04pXHJcbiAgICB3ID0gc2VjdG9yLncgLSAoc2VjdG9yLmggLSBoKVxyXG4gIHggPSBzZWN0b3IueCArIChzZWN0b3IudyAtIHcpIC8vIDJcclxuICB5ID0gc2VjdG9yLnkgLSBzZWN0b3IueCArIHhcclxuICBuZXcgUmVjdCB4LCB5LCB3LCBoXHJcblxyXG5nZW5lcmF0ZVJvb21zID0gKHRyZWUsIHRpbGVtYXApIC0+XHJcbiAgcm9vbXMgPSBbXVxyXG4gIGxlYWZzID0gdHJlZS5nZXRMZWFmcygpXHJcbiAgcm9vbXNUb0RlbGV0ZSA9IE1hdGgucm91bmQobGVhZnMubGVuZ3RoICogY2ZnLlJPT01fREVMRVRJTkdfUkFUSU8pXHJcbiAgIyBEZWxldGUgc29tZSByb29tc1xyXG4gIGZvciB4IGluIFswLi4ucm9vbXNUb0RlbGV0ZV1cclxuICAgIGluZGV4ID0gcmFuZG9tLnZhbHVlKGxlYWZzLmxlbmd0aClcclxuICAgIGxlYWZzW2luZGV4XS5raWxsKClcclxuICAgIGxlYWZzLnNwbGljZShpbmRleCwgMSlcclxuICAjIEdlbmVyYXRlIHJvb21zXHJcbiAgZm9yIGxlYWYsIGkgaW4gbGVhZnNcclxuICAgIHJvb21zW2ldID0gc3Bhd25Sb29tKGxlYWYubm9kZSlcclxuICAgIHRpbGVtYXAuZHJhd1JlY3Qocm9vbXNbaV0pXHJcbiAgcm9vbXNcclxuXHJcbmdlbmVyYXRlUGF0aHMgPSAodHJlZSwgdGlsZW1hcCkgLT5cclxuICBwYXRocyA9IFtdXHJcbiAgc2VjdG9yTGlzdCA9IHRyZWUuZ2V0Tm9kZUxpc3QoKVxyXG4gICMgQ29ubmVjdCBhbGwgbm9kZXNcclxuICBmb3IgXywgaSBpbiBzZWN0b3JMaXN0XHJcbiAgICBwYXRocy5wdXNoKG5ldyBQYXRoKHNlY3Rvckxpc3RbaV0uY2VudGVyLFxyXG4gICAgICBzZWN0b3JMaXN0WyhpKzEpICUgc2VjdG9yTGlzdC5sZW5ndGhdLmNlbnRlcikpXHJcbiAgIyBQYWludCBwYXRoc1xyXG4gIHRpbGVtYXAuZHJhd1BhdGgocGF0aCkgZm9yIHBhdGggaW4gcGF0aHNcclxuICBwYXRoc1xyXG5cclxuZ2VuZXJhdGVEb29ycyA9ICh0aWxlbWFwKSAtPlxyXG4gIExPT0tBSEVBRCA9IDNcclxuICBkb29ycyA9IFtdXHJcbiAgZm9yIGkgaW4gW0xPT0tBSEVBRC4uLnRpbGVtYXAubGVuZ3RoLUxPT0tBSEVBRF1cclxuICAgIGZvciBqIGluIFtMT09LQUhFQUQuLi50aWxlbWFwW2ldLmxlbmd0aC1MT09LQUhFQURdIHdoZW4gdGlsZW1hcFtpXVtqXSBpcyB0aWxlLkdST1VORFxyXG4gICAgICB0b3RhbCA9IFswLDAsMCwwXVxyXG4gICAgICAjIEhvcml6b250YWwgZGlyZWN0aW9uXHJcbiAgICAgIGlmIHRpbGVtYXBbaS0xXVtqXSBpcyB0aWxlbWFwW2krMV1bal0gaXMgdGlsZS5OVUxMIGFuZFxyXG4gICAgICAgICAgdGlsZW1hcFtpXVtqLTFdIGlzIHRpbGVtYXBbaV1baisxXSBpcyB0aWxlLkdST1VORFxyXG4gICAgICAgIGZvciBuIGluIFstTE9PS0FIRUFELi4tMV1cclxuICAgICAgICAgIHRvdGFsWzBdKysgaWYgdGlsZW1hcFtpLTFdW2orbl0gaXNudCB0aWxlLk5VTExcclxuICAgICAgICAgIHRvdGFsWzFdKysgaWYgdGlsZW1hcFtpKzFdW2orbl0gaXNudCB0aWxlLk5VTExcclxuICAgICAgICBmb3IgbiBpbiBbMS4uTE9PS0FIRUFEXVxyXG4gICAgICAgICAgdG90YWxbMl0rKyBpZiB0aWxlbWFwW2ktMV1baituXSBpc250IHRpbGUuTlVMTFxyXG4gICAgICAgICAgdG90YWxbM10rKyBpZiB0aWxlbWFwW2krMV1baituXSBpc250IHRpbGUuTlVMTFxyXG4gICAgICAjIFZlcnRpY2FsIGRpcmVjdGlvblxyXG4gICAgICBlbHNlIGlmIHRpbGVtYXBbaV1bai0xXSBpcyB0aWxlbWFwW2ldW2orMV0gaXMgdGlsZS5OVUxMIGFuZFxyXG4gICAgICAgICAgdGlsZW1hcFtpLTFdW2pdIGlzIHRpbGVtYXBbaSsxXVtqXSBpcyB0aWxlLkdST1VORFxyXG4gICAgICAgIGZvciBuIGluIFstTE9PS0FIRUFELi4tMV1cclxuICAgICAgICAgIHRvdGFsWzBdKysgaWYgdGlsZW1hcFtpK25dW2otMV0gaXNudCB0aWxlLk5VTExcclxuICAgICAgICAgIHRvdGFsWzFdKysgaWYgdGlsZW1hcFtpK25dW2orMV0gaXNudCB0aWxlLk5VTExcclxuICAgICAgICBmb3IgbiBpbiBbMS4uTE9PS0FIRUFEXVxyXG4gICAgICAgICAgdG90YWxbMl0rKyBpZiB0aWxlbWFwW2krbl1bai0xXSBpc250IHRpbGUuTlVMTFxyXG4gICAgICAgICAgdG90YWxbM10rKyBpZiB0aWxlbWFwW2krbl1baisxXSBpc250IHRpbGUuTlVMTFxyXG4gICAgICAjIElmIG11c3QgcGxhY2Ugcm9vbVxyXG4gICAgICBpZiAodG90YWxbMF0gPj0gTE9PS0FIRUFEIG9yIHRvdGFsWzFdID49IExPT0tBSEVBRCBvclxyXG4gICAgICAgICAgdG90YWxbMl0gPj0gTE9PS0FIRUFEIG9yIHRvdGFsWzNdID49IExPT0tBSEVBRCkgYW5kXHJcbiAgICAgICAgICByYW5kb20udGVzdChjZmcuRE9PUl9DSEFOQ0UpXHJcbiAgICAgICAgdGlsZW1hcFtpXVtqXSA9IHRpbGUuRE9PUlxyXG4gICAgICAgIGRvb3JzLnB1c2gobmV3IFBvaW50KGosaSkpXHJcbiAgZG9vcnNcclxuXHJcbnNwbGl0ID0gKHNlY3RvciwgaG9yaXpvbnRhbERpciA9IHJhbmRvbS50ZXN0KCksIHN0ZXBzID0gY2ZnLlBBUlRJVElPTl9MRVZFTCkgLT5cclxuICAjIFNwbGl0IGhvcml6b250YWxseVxyXG4gIGlmIGhvcml6b250YWxEaXJcclxuICAgICMgSWYgdG9vIG5hcnJvdyB0byBzcGxpdCBpbiB0aGlzIGRpcmVjdGlvbiwgdHJ5IHRvIHNwbGl0IGluIGFub3RoZXIgb25lXHJcbiAgICBpZiBzZWN0b3IuaC9zZWN0b3IudyA8IDIgKiBjZmcuUkFUSU9fUkVTVFJcclxuICAgICAgcmV0dXJuIHNwbGl0KHNlY3RvciwgIWhvcml6b250YWxEaXIsIHN0ZXBzKVxyXG4gICAgIyBJZiBzdG9wIHNwbGl0dGluZ1xyXG4gICAgZWxzZSBpZiAoc3RlcHMgaXMgMCkgb3IgKHNlY3Rvci5oIDwgMipjZmcuTUlOX1NFQ1RPUl9TSVpFKSBvclxyXG4gICAgICAgIChzZWN0b3IuaCA8IGNmZy5NQVhfU0VDVE9SX1NJWkUgYW5kIHJhbmRvbS50ZXN0KGNmZy5CSUdfUk9PTV9DSEFOQ0UpKVxyXG4gICAgICByZXR1cm4gW3NlY3Rvcl1cclxuICAgICMgRmluYWxseSBzcGxpdFxyXG4gICAgZWxzZVxyXG4gICAgICByZXN0cmljdGlvbiA9IE1hdGgubWF4KGNmZy5NSU5fU0VDVE9SX1NJWkUsXHJcbiAgICAgICAgTWF0aC5jZWlsKHNlY3Rvci5oICogY2ZnLlJBVElPX1JFU1RSKSlcclxuICAgICAgZGl2MSA9IG5ldyBSZWN0KHNlY3Rvci54LCBzZWN0b3IueSwgc2VjdG9yLncsXHJcbiAgICAgICAgcmFuZG9tLnZhbHVlKHJlc3RyaWN0aW9uLCBzZWN0b3IuaCAtIHJlc3RyaWN0aW9uKSlcclxuICAgICAgZGl2MiA9IG5ldyBSZWN0KHNlY3Rvci54LCBzZWN0b3IueSArIGRpdjEuaCwgc2VjdG9yLncsIHNlY3Rvci5oIC0gZGl2MS5oKVxyXG4gICAgIyBTcGxpdCB2ZXJ0aWNhbGx5XHJcbiAgZWxzZVxyXG4gICAgIyBJZiB0b28gbmFycm93IHRvIHNwbGl0IGluIHRoaXMgZGlyZWN0aW9uLCB0cnkgdG8gc3BsaXQgaW4gYW5vdGhlciBvbmVcclxuICAgIGlmIHNlY3Rvci53L3NlY3Rvci5oIDwgMiAqIGNmZy5SQVRJT19SRVNUUlxyXG4gICAgICByZXR1cm4gc3BsaXQoc2VjdG9yLCAhaG9yaXpvbnRhbERpciwgc3RlcHMpXHJcbiAgICAjIElmIHN0b3Agc3BsaXR0aW5nXHJcbiAgICBlbHNlIGlmIChzdGVwcyBpcyAwKSBvciAoc2VjdG9yLncgPCAyKmNmZy5NSU5fU0VDVE9SX1NJWkUpIG9yXHJcbiAgICAgICAgKHNlY3Rvci53IDwgY2ZnLk1BWF9TRUNUT1JfU0laRSBhbmQgcmFuZG9tLnRlc3QoY2ZnLkJJR19ST09NX0NIQU5DRSkpXHJcbiAgICAgIHJldHVybiBbc2VjdG9yXVxyXG4gICAgIyBGaW5hbGx5IHNwbGl0XHJcbiAgICBlbHNlXHJcbiAgICAgIHJlc3RyaWN0aW9uID0gTWF0aC5tYXgoY2ZnLk1JTl9TRUNUT1JfU0laRSxcclxuICAgICAgICBNYXRoLmNlaWwoc2VjdG9yLncgKiBjZmcuUkFUSU9fUkVTVFIpKVxyXG4gICAgICBkaXYxID0gbmV3IFJlY3Qoc2VjdG9yLngsIHNlY3Rvci55LFxyXG4gICAgICAgIHJhbmRvbS52YWx1ZShyZXN0cmljdGlvbiwgc2VjdG9yLncgLSByZXN0cmljdGlvbiksIHNlY3Rvci5oKVxyXG4gICAgICBkaXYyID0gbmV3IFJlY3Qoc2VjdG9yLnggKyBkaXYxLncsIHNlY3Rvci55LCBzZWN0b3IudyAtIGRpdjEudywgc2VjdG9yLmgpXHJcbiAgc3BsaXQoZGl2MSwgIWhvcml6b250YWxEaXIsIHN0ZXBzLTEpLmNvbmNhdChzcGxpdChkaXYyLCAhaG9yaXpvbnRhbERpciwgc3RlcHMtMSkpXHJcblxyXG4jIyMgRVhQT1JUICMjI1xyXG5AYnNwID1cclxuICBjb25maWc6IGNmZ1xyXG4gIGdlbmVyYXRlOiBnZW5lcmF0ZU1hcFxyXG4gIFRyZWU6IFRyZWUiXX0=