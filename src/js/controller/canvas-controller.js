var CanvasController, Color, wall;

Color = {
  GRID: "#211",
  BACKGROUND: "#fff",
  WALL: "#200",
  GROUND: "#622",
  DOOR: "#400",
  DOOR: "#844",
  DEBUG: "#0F0",
  START_POINT: "#450"
};

wall = ['NONE', 'TILE', 'COMPOSED'];

CanvasController = (function() {
  function CanvasController(id) {
    this.id = id;
    this.canvas = $('#' + this.id)[0].getContext("2d");
  }

  CanvasController.prototype.getWidth = function() {
    return parseInt($('#' + this.id).attr("width"));
  };

  CanvasController.prototype.calculateTileSize = function(numberOfTiles) {
    return Math.floor(this.getWidth() / numberOfTiles);
  };

  CanvasController.prototype.calculateGridWidth = function(tileSize) {
    return Math.floor(tileSize / 10);
  };

  CanvasController.prototype.calculateWallSize = function(tileSize) {
    return Math.floor(tileSize / 3);
  };

  CanvasController.prototype.drawMap = function(tilemap, drawGrid, showWalls) {
    var i, j, ref, ref1, tileSize, x, y;
    if (drawGrid == null) {
      drawGrid = true;
    }
    if (showWalls == null) {
      showWalls = true;
    }
    tileSize = this.calculateTileSize(tilemap.width);
    this.canvas.fillStyle = Color.BACKGROUND;
    this.canvas.fillRect(0, 0, this.getWidth(), this.getWidth());
    for (y = i = 0, ref = tilemap.height; 0 <= ref ? i < ref : i > ref; y = 0 <= ref ? ++i : --i) {
      for (x = j = 0, ref1 = tilemap.width; 0 <= ref1 ? j < ref1 : j > ref1; x = 0 <= ref1 ? ++j : --j) {
        switch (tilemap[x][y]) {
          case Tile.FIRST_ROOM:
            this.drawTile(x, y, tileSize, Color.START_POINT);
            break;
          case Tile.GROUND:
            this.drawTile(x, y, tileSize, Color.GROUND);
            break;
          case Tile.WALL:
            if (wall[showWalls] === 'TILE') {
              this.drawTile(x, y, tileSize, Color.WALL);
            } else if (wall[showWalls] === 'COMPOSED') {
              this.drawWall(x, y, tileSize, Color.WALL, tilemap);
            }
            break;
          case Tile.DOOR:
            this.drawTile(x, y, tileSize, Color.DOOR);
        }
      }
    }
    if (drawGrid) {
      return this.drawGrid(tilemap);
    }
  };

  CanvasController.prototype.drawTile = function(x, y, size, value) {
    this.canvas.fillStyle = value;
    return this.canvas.fillRect(x * size, y * size, size, size);
  };

  CanvasController.prototype.drawWall = function(x, y, size, value, tilemap) {
    var flags, wallSize;
    flags = {
      north: !tilemap.is(x, y - 1, 1, 1, Tile.EMPTY) && !tilemap.is(x, y - 1, 1, 1, Tile.WALL) && y > 1,
      south: !tilemap.is(x, y + 1, 1, 1, Tile.EMPTY) && !tilemap.is(x, y + 1, 1, 1, Tile.WALL) && y < tilemap.height - 1,
      east: !tilemap.is(x + 1, y, 1, 1, Tile.EMPTY) && !tilemap.is(x + 1, y, 1, 1, Tile.WALL) && x < tilemap.width - 1,
      west: !tilemap.is(x - 1, y, 1, 1, Tile.EMPTY) && !tilemap.is(x - 1, y, 1, 1, Tile.WALL) && x > 1,
      northwest: !tilemap.is(x - 1, y - 1, 1, 1, Tile.EMPTY) && !tilemap.is(x - 1, y - 1, 1, 1, Tile.WALL) && y > 1 && x > 1,
      northeast: !tilemap.is(x + 1, y - 1, 1, 1, Tile.EMPTY) && !tilemap.is(x + 1, y - 1, 1, 1, Tile.WALL) && y > 1 && x < tilemap.width - 1,
      southwest: !tilemap.is(x - 1, y + 1, 1, 1, Tile.EMPTY) && !tilemap.is(x - 1, y + 1, 1, 1, Tile.WALL) && y < tilemap.height - 1 && x > 1,
      southeast: !tilemap.is(x + 1, y + 1, 1, 1, Tile.EMPTY) && !tilemap.is(x + 1, y + 1, 1, 1, Tile.WALL) && y < tilemap.height - 1 && x < tilemap.width - 1
    };
    wallSize = this.calculateWallSize(size);
    this.canvas.fillStyle = value;
    if (flags.north) {
      this.canvas.fillRect(x * size, y * size, size, wallSize);
    }
    if (flags.south) {
      this.canvas.fillRect(x * size, (y + 1) * size - wallSize, size, wallSize);
    }
    if (flags.east) {
      this.canvas.fillRect((x + 1) * size - wallSize, y * size, wallSize, size);
    }
    if (flags.west) {
      this.canvas.fillRect(x * size, y * size, wallSize, size);
    }
    if (flags.northwest) {
      this.canvas.fillRect(x * size, y * size, wallSize, wallSize);
    }
    if (flags.northeast) {
      this.canvas.fillRect((x + 1) * size - wallSize, y * size, wallSize, wallSize);
    }
    if (flags.southeast) {
      this.canvas.fillRect((x + 1) * size - wallSize, (y + 1) * size - wallSize, wallSize, wallSize);
    }
    if (flags.southwest) {
      return this.canvas.fillRect(x * size, (y + 1) * size - wallSize, wallSize, wallSize);
    }
  };

  CanvasController.prototype.drawGrid = function(tilemap) {
    var i, ref, tileSize, x;
    tileSize = this.calculateTileSize(tilemap.width);
    this.canvas.beginPath();
    this.canvas.strokeStyle = Color.GRID;
    for (x = i = 0, ref = tilemap.width; 0 <= ref ? i <= ref : i >= ref; x = 0 <= ref ? ++i : --i) {
      this.canvas.moveTo(x * tileSize, 0);
      this.canvas.lineTo(x * tileSize, tilemap.width * tileSize);
      this.canvas.moveTo(0, x * tileSize);
      this.canvas.lineTo(tilemap.width * tileSize, x * tileSize);
    }
    this.canvas.lineWidth = this.calculateGridWidth(tileSize);
    this.canvas.stroke();
    return this.canvas.closePath();
  };

  return CanvasController;

})();

this.CanvasController = CanvasController;

this.wallStyle = wall;

//# sourceMappingURL=data:application/json;base64,